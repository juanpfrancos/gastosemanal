{"version":3,"sources":["Components/Header.js","Components/Form.js","Components/Gasto.js","Components/Listado.js","Components/Helpers.js","Components/Presupuesto.js","Components/Restante.js","Components/ControlPresupuesto.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","class","titulo","FormularioGasto","nombreGasto","React","createRef","cantidadGasto","crearGasto","e","preventDefault","gasto","current","value","agregarGasto","currentTarget","reset","onSubmit","this","ref","id","type","for","name","Component","Gasto","href","Listado","Object","keys","gastos","map","key","validarPresupuesto","presupuesto","totalPresupuesto","parseInt","Presupuesto","Restante","restante","ControlPresupuesto","App","state","obtenerPresupuesto","prompt","setState","Date","now","restarPresupuesto","console","log","cantidad","restar","Number","Form","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db42e770.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) =>{\r\n    return(\r\n    <div class=\"center \">\r\n    <h3>{props.titulo}</h3> \r\n    </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass FormularioGasto extends Component{\r\n     //Refs para los campos del formulario\r\n    \r\n     \r\n    nombreGasto = React.createRef();\r\n    cantidadGasto = React.createRef();        \r\n    crearGasto = (e) =>{\r\n\r\n        //Prevenir el default\r\n            e.preventDefault();\r\n        //Crear objeto con los datos\r\n            const gasto ={\r\n                nombreGasto : this.nombreGasto.current.value,\r\n                cantidadGasto :this.cantidadGasto.current.value\r\n            }   \r\n        //Agregar objeto y enviarlo por props\r\n\r\n            this.props.agregarGasto(gasto);\r\n\r\n\r\n        //Resetear formulario\r\n        e.currentTarget.reset();\r\n        }    \r\n    render() {\r\n\r\n        return (\r\n            //Invoco el método crearGasto en el formulario\r\n           <form class=\"container\" onSubmit={this.crearGasto}>\r\n               <h4>Agrega tus gastos</h4>\r\n               <div class=\"row\">\r\n                    <div class=\"input-field col s12 m6\">\r\n                        <input ref={this.nombreGasto} id=\"IdGasto\" type=\"text\"/>\r\n                        <label for=\"IdGasto\">Agrega tus gastos</label>\r\n                    </div>\r\n                    <div class=\"input-field col s12 m6\">\r\n                        <input ref={this.cantidadGasto} id=\"Cgasto\" type=\"text\" class=\"validate\"/>\r\n                        <label for=\"Cgasto\">Cantidad Gasto</label>\r\n                    </div>\r\n                    <div class=\"input-field col s6\">\r\n                    <button class=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\" value=\"agregar\">Agregar\r\n                    <i class=\"material-icons right\">send</i>\r\n                    </button>\r\n                    </div>\r\n                </div>  \r\n                    <script>\r\n                    M.AutoInit();\r\n                    </script>\r\n           </form>\r\n                 \r\n        );\r\n    }\r\n}\r\n\r\nexport default FormularioGasto;","import React, {Component} from 'react';\r\n\r\nclass Gasto extends Component{\r\n    render() {\r\n        const {cantidadGasto, nombreGasto} = this.props.gasto;\r\n\r\n        return (\r\n             <a href=\"#!\" class=\"collection-item\">{nombreGasto}<span> </span>{cantidadGasto}</a>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Gasto;","import React, {Component} from 'react';\r\nimport Gasto from './Gasto';\r\n\r\nclass Listado extends Component{\r\n    render() {\r\n        return (\r\n            <div class=\"container\">\r\n                \r\n                    <h4>Listado de Gastos</h4>\r\n                <div class=\"collection\">\r\n                        {Object.keys(this.props.gastos).map(key => (\r\n                            <Gasto \r\n                            key={key}    \r\n                            gasto={this.props.gastos[key]}\r\n                            />\r\n                        ))}\r\n                </div>         \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Listado;","export const validarPresupuesto = presupuesto => {\r\n    let totalPresupuesto = parseInt(presupuesto, 10)|| 0;\r\n\r\n    if(totalPresupuesto > 0 ) {\r\n        return totalPresupuesto;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const revisarPresupuesto = (presupuesto,restante) => {\r\n    let clase;\r\n    // Comprobar el 25% \r\n    if( (presupuesto / 4) > restante) {\r\n         clase = 'alert alert-danger';\r\n    } else if( (presupuesto / 2) > restante) {\r\n        clase = 'alert alert-warning'\r\n    } else {\r\n        clase = 'alert alert alert-success';\r\n    }\r\n    return clase;\r\n} ","import React, {Component} from 'react';\r\n\r\nclass Presupuesto extends Component{\r\n    render() {\r\n        return (\r\n                <a href=\"#!\" class=\"collection-item\">Presupuesto: ${this.props.presupuesto}</a>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Presupuesto;","import React, {Component} from 'react';\r\n\r\nclass Restante extends Component{\r\n    render() {\r\n        return (\r\n            <a href=\"#!\" class=\"collection-item\">Restante: ${this.props.restante}</a>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Restante;","import React, {Component} from 'react';\r\nimport Presupuesto from './Presupuesto'\r\nimport Restante from './Restante'\r\n\r\nclass ControlPresupuesto extends Component{\r\n    render() {\r\n        return (\r\n            <div class=\"card grey center\">\r\n                <h4>Control de Presupuesto</h4>\r\n                <div class=\"collection container\">\r\n                <Presupuesto presupuesto={this.props.presupuesto}/>\r\n                <Restante restante={this.props.restante}/>\r\n                </div>\r\n                <br></br>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ControlPresupuesto;","import React, {Component} from 'react';\r\nimport Header from './Components/Header'\r\nimport FormularioGasto from './Components/Form'\r\nimport Listado from './Components/Listado'\r\nimport {validarPresupuesto} from './Components/Helpers'\r\nimport ControlPresupuesto from './Components/ControlPresupuesto'\r\n\r\nclass App extends Component{\r\n\r\n//Agregar un nuevo gasto al state \r\n state ={\r\n   presupuesto: '',\r\n   restante: '',\r\n   gastos: {}\r\n }\r\n\r\n componentDidMount(){\r\n   this.obtenerPresupuesto();\r\n  }\r\n\r\n  obtenerPresupuesto = () =>{\r\n    let presupuesto = prompt('Cuál es el presupuesto')\r\n    //Muestra si el valor ingresado es válido\r\n    let resultado = validarPresupuesto(presupuesto);\r\n    if (resultado) {\r\n      this.setState({\r\n        presupuesto: presupuesto,\r\n        restante: presupuesto  \r\n      })\r\n          }\r\n    else{\r\n      this.obtenerPresupuesto();\r\n        }\r\n  }\r\nagregarGasto = gasto =>{\r\n  //Tomar una copia del state actual en forma de string con el spread operator\r\n    const gastos = {...this.state.gastos};\r\n   \r\n  //Agregar gasto al objeto del state\r\n    gastos[`gasto${Date.now()}`] = gasto;\r\n\r\n  //Restar al presupuesto\r\n\r\n  this.restarPresupuesto(gasto.cantidadGasto);\r\n  \r\n  \r\n    console.log(gasto);\r\n  //Ponerlo en el state\r\n  this.setState({\r\n    gastos\r\n  })\r\n}\r\n\r\n\r\n//Restar del presupuesto cuando un gasto se crea\r\n\r\nrestarPresupuesto = cantidad =>{\r\n  //Leer el gasto\r\n  let restar = Number(cantidad); //Convertir el string cantidad en número\r\n\r\n  //Tomar una copia del state actual\r\n  let restante = this.state.restante;\r\n\r\n  //Hacemos la resta\r\n  \r\n  restante -= restar;\r\n\r\n  //Agregamos el nuevo state\r\n  this.setState({\r\n    restante\r\n  }\r\n\r\n  )\r\n  \r\n}\r\n\r\n  render(){\r\n    return(\r\n        <div class=\"card grey lighten-3 z-depth-4\"> \r\n              <Header titulo='Control de Gastos'/> \r\n              <div class=\"\">  \r\n                  <FormularioGasto agregarGasto ={this.agregarGasto} />\r\n                  <Listado gastos={this.state.gastos}/>\r\n              </div>\r\n              <div class=\"container\">\r\n                  <ControlPresupuesto  presupuesto={this.state.presupuesto}  restante={this.state.restante} />\r\n              </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}